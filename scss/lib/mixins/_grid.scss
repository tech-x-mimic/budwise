@import "./responsive";
@import "../functions/map";
@import "../functions/breakpoint";
@import "../../variables/grid";

@mixin make-grids() {
  @include responsives() using ($breakpoint) {
    @include map-grid-class($breakpoint);

    @include grid-gap($breakpoint);

    @for $i from 1 through $grids {
      @include grid-template($breakpoint, $i);

      @include grid-position($breakpoint, $i);
      @if $i == $grids {
        @include grid-position($breakpoint, $i + 1);
      }
    }
  }
}

@mixin map-grid-class($breakpoint) {
  @each $classname, $prop-map in $grid-class-map {
    .#{with-affix($breakpoint, without-dot($classname))} {
      @each $prop, $value in $prop-map {
        #{get-or-default($grid-cheatsheet-map, $prop, $prop)}: $value;
      }
    }
  }
}

@mixin grid-template($breakpoint, $i) {
  .#{with-affix($breakpoint, "template-rows-#{$i}")} {
    grid-template-rows: repeat($i, minmax(0, 1fr));
  }
  .#{with-affix($breakpoint, "template-cols-#{$i}")} {
    grid-template-columns: repeat($i, minmax(0, 1fr));
  }
}

@mixin grid-position($breakpoint, $i) {
  .#{with-affix($breakpoint, "row-start-#{$i}")} {
    grid-row-start: $i;
  }
  .#{with-affix($breakpoint, "row-end-#{$i}")} {
    grid-row-end: $i;
  }
  .#{with-affix($breakpoint, "col-start-#{$i}")} {
    grid-column-start: $i;
  }
  .#{with-affix($breakpoint, "col-end-#{$i}")} {
    grid-column-end: $i;
  }
}

@mixin grid-gap($breakpoint) {
  @each $i, $tier in $grid-gap-tiers {
    $gap: map-get($grid-gap-breakpoints, $breakpoint) * $tier;

    .gap-#{$i} {
      gap: $gap;
    }

    .gap-x-#{$i} {
      column-gap: $gap;
    }

    .gap-y-#{$i} {
      row-gap: $gap;
    }
  }
}
