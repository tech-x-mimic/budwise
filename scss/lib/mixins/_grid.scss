@import "../../variables/grid";
@import "../functions/breakpoint";
@import "../functions/map";
@import "./responsive";

@mixin make-grids(
  $grid-class-map: $grid-class-map,
  $grid-cheatsheet-map: $grid-cheatsheet-map,
  $grid-matrix: $grid-matrix,
  $grid-gap-tiers: $grid-gap-tiers,
  $grid-gap-breakpoints: $grid-gap-breakpoints
) {
  @include responsive-each() using ($breakpoint) {
    @each $classname, $prop-map in $grid-class-map {
      .#{with-affix($breakpoint, without-dot($classname))} {
        @each $prop, $value in $prop-map {
          #{get-or-default($grid-cheatsheet-map, $prop, $prop)}: $value;
        }
      }
    }

    $grid-overflow-auto: with-affix($breakpoint, "grid-overflow-auto");
    .#{$grid-overflow-auto} {
      grid-auto-rows: 1fr;
      grid-auto-columns: 1fr;
    }

    @for $i from 1 through $grid-matrix {
      $grid-i: with-affix($breakpoint, "grid-#{$i}");

      .#{$grid-i} {
        grid-template-rows: repeat($i, minmax(0, 1fr));
        grid-template-columns: repeat($i, minmax(0, 1fr));

        @extend .#{$grid-overflow-auto};
      }

      @for $j from 1 through $grid-matrix {
        .#{with-affix($breakpoint, "grid-#{$i}-#{$j}")} {
          @if $i == $j {
            @extend .#{$grid-i};
          } @else {
            grid-template-columns: repeat($i, minmax(0, 1fr));
            grid-template-rows: repeat($j, minmax(0, 1fr));

            @extend .#{$grid-overflow-auto};
          }
        }
      }

      .#{with-affix($breakpoint, "rows-#{$i}")} {
        grid-template-rows: repeat($i, minmax(0, 1fr));
      }

      .#{with-affix($breakpoint, "cols-#{$i}")} {
        grid-template-columns: repeat($i, minmax(0, 1fr));
      }
    }

    @each $i, $tier in $grid-gap-tiers {
      $gap: map-get($grid-gap-breakpoints, $breakpoint) * $tier;

      .gap-#{$i} {
        gap: $gap;
      }

      .gap-x-#{$i} {
        column-gap: $gap;
      }

      .gap-y-#{$i} {
        row-gap: $gap;
      }
    }
  }
}
